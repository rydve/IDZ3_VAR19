import numpy as np

# Данные выборки (уже отсортированы)
data_sorted = [-10.37, -9.52, -6.71, -6.30, -6.03, -5.95, -5.72, -5.36, -5.25, -5.24,
               -4.05, -4.00, -3.94, -3.63, -3.45, -3.38, -2.78, -2.73, -2.53, -2.16,
               -1.94, -1.75, -1.67, -1.59, -0.30, 0.05, 0.15, 0.34, 0.35, 0.63,
               1.00, 1.82, 2.78, 2.86, 3.26, 3.85, 4.12, 4.63, 4.67, 4.74, 4.90,
               5.04, 5.08, 5.44, 6.37, 6.84, 7.60, 8.13, 9.67, 11.25]

# Количество элементов
n = len(data_sorted)

# Функция вычисления эмпирической вероятности F(x)
def empirical_cdf(x, data_sorted):
    return np.searchsorted(data_sorted, x, side='right') / n

# Определяем границы интервала
c, d = -3, 5  # Можно задать другие границы

# Вычисляем эмпирические вероятности
F_c = empirical_cdf(c, data_sorted)
F_d = empirical_cdf(d, data_sorted)

# Оценка вероятности попадания в интервал
P_cd = F_d - F_c

# Вывод результатов
print(f"F({c}) = {F_c:.4f}")
print(f"F({d}) = {F_d:.4f}")
print(f"P({c} ≤ X ≤ {d}) = {P_cd:.4f}")
